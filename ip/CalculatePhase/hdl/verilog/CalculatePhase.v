// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CalculatePhase,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.419400,HLS_SYN_LAT=357,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=10,HLS_SYN_FF=2955,HLS_SYN_LUT=5102}" *)

module CalculatePhase (
        ap_clk,
        ap_rst_n,
        s_axi_crtls_AWVALID,
        s_axi_crtls_AWREADY,
        s_axi_crtls_AWADDR,
        s_axi_crtls_WVALID,
        s_axi_crtls_WREADY,
        s_axi_crtls_WDATA,
        s_axi_crtls_WSTRB,
        s_axi_crtls_ARVALID,
        s_axi_crtls_ARREADY,
        s_axi_crtls_ARADDR,
        s_axi_crtls_RVALID,
        s_axi_crtls_RREADY,
        s_axi_crtls_RDATA,
        s_axi_crtls_RRESP,
        s_axi_crtls_BVALID,
        s_axi_crtls_BREADY,
        s_axi_crtls_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 110'b1;
parameter    ap_ST_fsm_state2 = 110'b10;
parameter    ap_ST_fsm_state3 = 110'b100;
parameter    ap_ST_fsm_state4 = 110'b1000;
parameter    ap_ST_fsm_state5 = 110'b10000;
parameter    ap_ST_fsm_state6 = 110'b100000;
parameter    ap_ST_fsm_state7 = 110'b1000000;
parameter    ap_ST_fsm_state8 = 110'b10000000;
parameter    ap_ST_fsm_state9 = 110'b100000000;
parameter    ap_ST_fsm_state10 = 110'b1000000000;
parameter    ap_ST_fsm_state11 = 110'b10000000000;
parameter    ap_ST_fsm_state12 = 110'b100000000000;
parameter    ap_ST_fsm_state13 = 110'b1000000000000;
parameter    ap_ST_fsm_state14 = 110'b10000000000000;
parameter    ap_ST_fsm_state15 = 110'b100000000000000;
parameter    ap_ST_fsm_state16 = 110'b1000000000000000;
parameter    ap_ST_fsm_state17 = 110'b10000000000000000;
parameter    ap_ST_fsm_state18 = 110'b100000000000000000;
parameter    ap_ST_fsm_state19 = 110'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 110'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 110'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 110'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 110'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 110'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 110'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 110'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 110'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 110'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 110'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 110'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 110'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 110'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 110'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 110'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 110'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 110'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 110'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 110'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 110'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 110'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 110'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 110'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 110'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 110'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 110'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 110'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 110'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 110'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 110'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 110'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 110'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 110'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 110'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 110'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 110'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 110'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 110'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 110'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 110'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 110'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 110'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 110'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 110'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 110'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 110'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state66 = 110'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state67 = 110'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state68 = 110'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state69 = 110'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state70 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state71 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state72 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state73 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state74 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state75 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state76 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state77 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state78 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state79 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state80 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state81 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state82 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state83 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state84 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state85 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state86 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state87 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state88 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state89 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state90 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state91 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state92 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state93 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state94 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state95 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state96 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state97 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state98 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state99 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state100 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state101 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state102 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state103 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state104 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state105 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state106 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state107 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state108 = 110'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state109 = 110'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state110 = 110'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_CRTLS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CRTLS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_66 = 32'b1100110;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_6A = 32'b1101010;
parameter    ap_const_lv32_39 = 32'b111001;
parameter    ap_const_lv32_61 = 32'b1100001;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_3A = 32'b111010;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv32_4B = 32'b1001011;
parameter    ap_const_lv32_4C = 32'b1001100;
parameter    ap_const_lv32_4D = 32'b1001101;
parameter    ap_const_lv32_4E = 32'b1001110;
parameter    ap_const_lv32_51 = 32'b1010001;
parameter    ap_const_lv32_6B = 32'b1101011;
parameter    ap_const_lv32_6C = 32'b1101100;
parameter    ap_const_lv32_6D = 32'b1101101;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_3C = 32'b111100;
parameter    ap_const_lv32_3F800000 = 32'b111111100000000000000000000000;
parameter    ap_const_lv32_C1400000 = 32'b11000001010000000000000000000000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_62 = 32'b1100010;
parameter    ap_const_lv32_3C0B61FE = 32'b111100000010110110000111111110;
parameter    ap_const_lv32_43800000 = 32'b1000011100000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_67 = 32'b1100111;
parameter    ap_const_lv32_447A0000 = 32'b1000100011110100000000000000000;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_52 = 32'b1010010;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv8_96 = 8'b10010110;
parameter    ap_const_lv9_1FF = 9'b111111111;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv23_1 = 23'b1;
parameter    ap_const_lv32_7FFFFFFF = 32'b1111111111111111111111111111111;
parameter    ap_const_lv8_7E = 8'b1111110;
parameter    ap_const_lv23_7FFFFF = 23'b11111111111111111111111;
parameter    ap_const_lv9_181 = 9'b110000001;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv5_1 = 5'b1;

parameter C_S_AXI_CRTLS_WSTRB_WIDTH = (C_S_AXI_CRTLS_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_crtls_AWVALID;
output   s_axi_crtls_AWREADY;
input  [C_S_AXI_CRTLS_ADDR_WIDTH - 1 : 0] s_axi_crtls_AWADDR;
input   s_axi_crtls_WVALID;
output   s_axi_crtls_WREADY;
input  [C_S_AXI_CRTLS_DATA_WIDTH - 1 : 0] s_axi_crtls_WDATA;
input  [C_S_AXI_CRTLS_WSTRB_WIDTH - 1 : 0] s_axi_crtls_WSTRB;
input   s_axi_crtls_ARVALID;
output   s_axi_crtls_ARREADY;
input  [C_S_AXI_CRTLS_ADDR_WIDTH - 1 : 0] s_axi_crtls_ARADDR;
output   s_axi_crtls_RVALID;
input   s_axi_crtls_RREADY;
output  [C_S_AXI_CRTLS_DATA_WIDTH - 1 : 0] s_axi_crtls_RDATA;
output  [1:0] s_axi_crtls_RRESP;
output   s_axi_crtls_BVALID;
input   s_axi_crtls_BREADY;
output  [1:0] s_axi_crtls_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [109:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] T_X;
wire   [31:0] T_Y;
wire   [31:0] T_Z;
wire   [7:0] Offset;
wire   [5:0] XTransducerPositions_address0;
reg    XTransducerPositions_ce0;
wire   [31:0] XTransducerPositions_q0;
wire   [5:0] YTransducerPositions_address0;
reg    YTransducerPositions_ce0;
wire   [31:0] YTransducerPositions_q0;
wire   [4:0] mask_table4_address0;
reg    mask_table4_ce0;
wire   [22:0] mask_table4_q0;
wire   [4:0] mask_table1_address0;
reg    mask_table1_ce0;
wire   [22:0] mask_table1_q0;
wire   [4:0] one_half_table2_address0;
reg    one_half_table2_ce0;
wire   [23:0] one_half_table2_q0;
wire   [31:0] grp_fu_256_p2;
reg   [31:0] reg_294;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state25;
wire   [0:0] ap_CS_fsm_state30;
wire   [0:0] ap_CS_fsm_state103;
wire   [31:0] grp_fu_267_p2;
reg   [31:0] reg_302;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] ap_CS_fsm_state107;
wire   [31:0] grp_fu_277_p2;
reg   [31:0] reg_307;
wire   [0:0] ap_CS_fsm_state58;
wire   [0:0] ap_CS_fsm_state98;
reg   [7:0] Offset_read_reg_901;
reg   [31:0] T_Y_read_reg_911;
reg   [31:0] T_X_read_reg_916;
reg   [31:0] Zdist_sq_reg_921;
wire   [0:0] ap_CS_fsm_state9;
wire   [2:0] i_1_fu_325_p2;
reg   [2:0] i_1_reg_929;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] exitcond_fu_319_p2;
reg   [31:0] XTransducerPositions_1_reg_944;
wire   [0:0] ap_CS_fsm_state11;
reg   [31:0] YTransducerPositions_1_reg_949;
wire   [31:0] grp_fu_262_p2;
reg   [31:0] Ydist_sq_reg_954;
wire   [31:0] grp_fu_271_p2;
reg   [31:0] Ydist_sq_1_reg_960;
wire   [31:0] grp_fu_289_p2;
reg   [31:0] tmp_2_reg_965;
wire   [0:0] ap_CS_fsm_state42;
wire   [0:0] grp_fu_284_p2;
reg   [0:0] tmp_6_reg_970;
wire   [0:0] ap_CS_fsm_state59;
wire   [0:0] tmp_11_fu_383_p2;
reg   [0:0] tmp_11_reg_978;
wire   [0:0] ap_CS_fsm_state60;
wire   [0:0] tmp_7_fu_378_p2;
reg   [31:0] x_assign_reg_982;
wire   [0:0] ap_CS_fsm_state76;
reg   [0:0] p_Result_s_reg_987;
reg   [7:0] loc_V_reg_993;
wire   [22:0] loc_V_1_fu_411_p1;
reg   [22:0] loc_V_1_reg_1001;
wire   [0:0] tmp_i_i4_fu_430_p2;
reg   [0:0] tmp_i_i4_reg_1012;
wire   [0:0] ap_CS_fsm_state77;
wire   [22:0] xf_sig_V_fu_435_p2;
reg   [22:0] xf_sig_V_reg_1017;
reg   [22:0] p_Result_22_fu_440_p4;
reg   [22:0] p_Result_22_reg_1023;
wire   [0:0] tmp_i_fu_450_p2;
reg   [0:0] tmp_i_reg_1028;
wire   [0:0] ap_CS_fsm_state78;
wire   [31:0] sel_tmp7_i_fu_584_p3;
reg   [31:0] sel_tmp7_i_reg_1033;
wire   [31:0] remainder_fu_592_p3;
wire   [0:0] ap_CS_fsm_state79;
wire   [0:0] ap_CS_fsm_state82;
wire   [31:0] t_V_4_fu_598_p1;
reg   [31:0] t_V_4_reg_1048;
wire   [0:0] tmp_5_i_i_fu_612_p2;
reg   [0:0] tmp_5_i_i_reg_1054;
wire   [0:0] tmp_7_i_i_fu_618_p2;
reg   [0:0] tmp_7_i_i_reg_1060;
reg   [7:0] loc_V_4_reg_1075;
wire   [0:0] ap_CS_fsm_state108;
wire   [22:0] loc_V_5_fu_741_p1;
reg   [22:0] loc_V_5_reg_1081;
wire   [0:0] isNeg_fu_754_p3;
reg   [0:0] isNeg_reg_1086;
wire   [0:0] ap_CS_fsm_state109;
wire   [8:0] sh_assign_1_fu_771_p3;
reg   [8:0] sh_assign_1_reg_1091;
wire   [31:0] output_1_fu_895_p2;
wire   [0:0] ap_CS_fsm_state110;
reg   [31:0] output_reg_218;
reg   [2:0] i_reg_230;
reg   [31:0] p_0_i_reg_242;
wire   [0:0] ap_CS_fsm_state61;
wire  signed [31:0] tmp_9_cast_fu_336_p1;
wire   [31:0] tmp_9_i_fu_425_p1;
wire   [31:0] tmp_9_i_i_fu_634_p1;
reg   [31:0] grp_fu_256_p0;
reg   [31:0] grp_fu_256_p1;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state21;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] ap_CS_fsm_state99;
reg   [31:0] grp_fu_267_p0;
reg   [31:0] grp_fu_267_p1;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] ap_CS_fsm_state104;
reg   [31:0] grp_fu_277_p0;
reg   [31:0] grp_fu_277_p1;
wire   [0:0] ap_CS_fsm_state43;
wire   [0:0] ap_CS_fsm_state83;
wire   [0:0] ap_CS_fsm_state31;
wire   [7:0] i_cast_fu_315_p1;
wire   [7:0] tmp_9_fu_331_p2;
wire   [31:0] Delay_2_to_int_fu_342_p1;
wire   [7:0] tmp_3_fu_346_p4;
wire   [22:0] tmp_4_fu_356_p1;
wire   [0:0] notrhs_fu_366_p2;
wire   [0:0] notlhs_fu_360_p2;
wire   [0:0] tmp_5_fu_372_p2;
wire   [31:0] p_Val2_s_fu_389_p1;
wire   [4:0] index_V_1_fu_415_p4;
wire   [31:0] p_Result_23_fu_465_p3;
reg   [31:0] zeros_fu_472_p3;
wire   [31:0] p_Result_24_fu_489_p3;
wire   [7:0] tmp_19_fu_500_p1;
wire   [7:0] tmp_3_i6_fu_504_p2;
wire   [0:0] tmp_2_i_fu_484_p2;
wire   [7:0] addconv_i_fu_510_p2;
wire   [22:0] r_V_fu_523_p2;
wire   [22:0] tmp_18_fu_480_p1;
wire   [7:0] xf_exp_V_fu_515_p3;
wire   [22:0] r_V_2_fu_528_p2;
wire   [31:0] p_Result_25_fu_534_p4;
wire   [0:0] tmp_6_i_fu_455_p2;
wire   [0:0] sel_tmp_i_fu_547_p2;
wire   [0:0] tmp_i_i_fu_460_p2;
wire   [0:0] tmp7_fu_559_p2;
wire   [0:0] tmp_fu_553_p2;
wire   [0:0] sel_tmp2_i_fu_564_p2;
wire   [31:0] ret_i_i_i_i_fu_496_p1;
wire   [0:0] sel_tmp6_demorgan_i_fu_578_p2;
wire   [31:0] sel_tmp3_i_fu_570_p3;
wire   [31:0] ret_i_i1_i_fu_543_p1;
wire   [7:0] loc_V_2_fu_602_p4;
wire   [4:0] index_V_fu_624_p4;
wire   [0:0] p_Result_11_fu_640_p3;
wire   [31:0] one_half_cast_fu_655_p1;
wire   [31:0] p_Val2_12_fu_659_p2;
wire   [22:0] loc_V_3_fu_664_p1;
wire   [22:0] tmp_2_i_i_fu_668_p2;
wire   [8:0] tmp_13_fu_680_p4;
wire   [22:0] xs_sig_V_fu_674_p2;
wire   [31:0] p_Result_26_fu_647_p3;
wire   [31:0] p_Result_27_fu_690_p3;
wire   [31:0] sel_tmp_v_fu_698_p3;
wire   [0:0] sel_tmp1_fu_709_p2;
wire   [0:0] sel_tmp2_fu_714_p2;
wire   [31:0] sel_tmp_fu_705_p1;
wire   [31:0] x_assign_1_fu_719_p3;
wire   [31:0] p_Val2_14_fu_727_p1;
wire   [8:0] tmp_i_i_i_cast8_fu_745_p1;
wire   [8:0] sh_assign_fu_748_p2;
wire   [7:0] tmp_14_i_i_fu_762_p2;
wire  signed [8:0] tmp_14_i_i_cast_fu_767_p1;
wire   [23:0] p_Result_28_fu_779_p3;
wire  signed [31:0] sh_assign_1_cast_fu_790_p1;
wire  signed [23:0] sh_assign_1_cast_cas_fu_793_p1;
wire   [77:0] tmp_i_i_41_fu_786_p1;
wire   [77:0] tmp_15_i_i_fu_796_p1;
wire   [23:0] tmp_16_i_i_fu_800_p2;
wire   [0:0] tmp_27_fu_812_p3;
wire   [77:0] tmp_17_i_i_fu_806_p2;
wire   [31:0] tmp_19_cast_fu_820_p1;
wire   [31:0] tmp_14_fu_824_p4;
wire   [31:0] result_V_fu_834_p3;
wire   [23:0] tmp_29_fu_845_p4;
wire   [0:0] icmp_fu_855_p2;
wire   [7:0] tmp_28_fu_841_p1;
wire   [7:0] p_s_fu_861_p3;
wire   [1:0] tmp_30_fu_873_p1;
wire   [4:0] tmp_15_fu_877_p3;
wire   [31:0] p_cast_fu_869_p1;
wire   [31:0] tmp_15_cast_fu_885_p1;
wire   [31:0] tmp_16_fu_889_p2;
reg   [1:0] grp_fu_256_opcode;
reg   [4:0] grp_fu_284_opcode;
reg   [109:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 110'b1;
end

CalculatePhase_XTbkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
XTransducerPositions_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(XTransducerPositions_address0),
    .ce0(XTransducerPositions_ce0),
    .q0(XTransducerPositions_q0)
);

CalculatePhase_YTcud #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
YTransducerPositions_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(YTransducerPositions_address0),
    .ce0(YTransducerPositions_ce0),
    .q0(YTransducerPositions_q0)
);

CalculatePhase_madEe #(
    .DataWidth( 23 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
mask_table4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mask_table4_address0),
    .ce0(mask_table4_ce0),
    .q0(mask_table4_q0)
);

CalculatePhase_madEe #(
    .DataWidth( 23 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
mask_table1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mask_table1_address0),
    .ce0(mask_table1_ce0),
    .q0(mask_table1_q0)
);

CalculatePhase_onfYi #(
    .DataWidth( 24 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
one_half_table2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(one_half_table2_address0),
    .ce0(one_half_table2_ce0),
    .q0(one_half_table2_q0)
);

CalculatePhase_crtls_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTLS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTLS_DATA_WIDTH ))
CalculatePhase_crtls_s_axi_U(
    .AWVALID(s_axi_crtls_AWVALID),
    .AWREADY(s_axi_crtls_AWREADY),
    .AWADDR(s_axi_crtls_AWADDR),
    .WVALID(s_axi_crtls_WVALID),
    .WREADY(s_axi_crtls_WREADY),
    .WDATA(s_axi_crtls_WDATA),
    .WSTRB(s_axi_crtls_WSTRB),
    .ARVALID(s_axi_crtls_ARVALID),
    .ARREADY(s_axi_crtls_ARREADY),
    .ARADDR(s_axi_crtls_ARADDR),
    .RVALID(s_axi_crtls_RVALID),
    .RREADY(s_axi_crtls_RREADY),
    .RDATA(s_axi_crtls_RDATA),
    .RRESP(s_axi_crtls_RRESP),
    .BVALID(s_axi_crtls_BVALID),
    .BREADY(s_axi_crtls_BREADY),
    .BRESP(s_axi_crtls_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(output_reg_218),
    .T_X(T_X),
    .T_Y(T_Y),
    .T_Z(T_Z),
    .Offset(Offset)
);

CalculatePhase_fag8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CalculatePhase_fag8j_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_256_p0),
    .din1(grp_fu_256_p1),
    .opcode(grp_fu_256_opcode),
    .ce(1'b1),
    .dout(grp_fu_256_p2)
);

CalculatePhase_fshbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CalculatePhase_fshbi_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(T_Y_read_reg_911),
    .din1(YTransducerPositions_1_reg_949),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

CalculatePhase_fmibs #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CalculatePhase_fmibs_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_267_p0),
    .din1(grp_fu_267_p1),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

CalculatePhase_fmibs #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CalculatePhase_fmibs_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Ydist_sq_reg_954),
    .din1(Ydist_sq_reg_954),
    .ce(1'b1),
    .dout(grp_fu_271_p2)
);

CalculatePhase_fdjbC #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CalculatePhase_fdjbC_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_277_p0),
    .din1(grp_fu_277_p1),
    .ce(1'b1),
    .dout(grp_fu_277_p2)
);

CalculatePhase_fckbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
CalculatePhase_fckbM_U5(
    .din0(reg_307),
    .din1(ap_const_lv32_3C0B61FE),
    .opcode(grp_fu_284_opcode),
    .dout(grp_fu_284_p2)
);

CalculatePhase_fslbW #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CalculatePhase_fslbW_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_const_lv32_0),
    .din1(reg_294),
    .ce(1'b1),
    .dout(grp_fu_289_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        i_reg_230 <= i_1_reg_929;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_230 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        output_reg_218 <= output_1_fu_895_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_reg_218 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & ~(1'b0 == tmp_11_reg_978))) begin
        p_0_i_reg_242 <= ap_const_lv32_0;
    end else if (((1'b1 == ap_CS_fsm_state60) & ~(1'b0 == tmp_7_fu_378_p2))) begin
        p_0_i_reg_242 <= reg_307;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        p_0_i_reg_242 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        Offset_read_reg_901 <= Offset;
        T_X_read_reg_916 <= T_X;
        T_Y_read_reg_911 <= T_Y;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        XTransducerPositions_1_reg_944 <= XTransducerPositions_q0;
        YTransducerPositions_1_reg_949 <= YTransducerPositions_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        Ydist_sq_1_reg_960 <= grp_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        Ydist_sq_reg_954 <= grp_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Zdist_sq_reg_921 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_929 <= i_1_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        isNeg_reg_1086 <= sh_assign_fu_748_p2[ap_const_lv32_8];
        sh_assign_1_reg_1091 <= sh_assign_1_fu_771_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        loc_V_1_reg_1001 <= loc_V_1_fu_411_p1;
        loc_V_reg_993 <= {{p_Val2_s_fu_389_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
        p_Result_s_reg_987 <= p_Val2_s_fu_389_p1[ap_const_lv32_1F];
        x_assign_reg_982 <= grp_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        loc_V_4_reg_1075 <= {{p_Val2_14_fu_727_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
        loc_V_5_reg_1081 <= loc_V_5_fu_741_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        p_Result_22_reg_1023 <= p_Result_22_fu_440_p4;
        tmp_i_i4_reg_1012 <= tmp_i_i4_fu_430_p2;
        xf_sig_V_reg_1017 <= xf_sig_V_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state103))) begin
        reg_294 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state107))) begin
        reg_302 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state98))) begin
        reg_307 <= grp_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        sel_tmp7_i_reg_1033 <= sel_tmp7_i_fu_584_p3;
        tmp_i_reg_1028 <= tmp_i_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        t_V_4_reg_1048 <= t_V_4_fu_598_p1;
        tmp_5_i_i_reg_1054 <= tmp_5_i_i_fu_612_p2;
        tmp_7_i_i_reg_1060 <= tmp_7_i_i_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) & (1'b0 == tmp_7_fu_378_p2))) begin
        tmp_11_reg_978 <= tmp_11_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_2_reg_965 <= grp_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        tmp_6_reg_970 <= grp_fu_284_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        XTransducerPositions_ce0 = 1'b1;
    end else begin
        XTransducerPositions_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        YTransducerPositions_ce0 = 1'b1;
    end else begin
        YTransducerPositions_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(exitcond_fu_319_p2 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(exitcond_fu_319_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state99))) begin
        grp_fu_256_opcode = ap_const_lv2_1;
    end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_fu_256_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_256_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        grp_fu_256_p0 = ap_const_lv32_3F800000;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_256_p0 = reg_294;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_256_p0 = reg_302;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_256_p0 = T_X_read_reg_916;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        grp_fu_256_p0 = T_Z;
    end else begin
        grp_fu_256_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        grp_fu_256_p1 = reg_307;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_256_p1 = Zdist_sq_reg_921;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_256_p1 = Ydist_sq_1_reg_960;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_256_p1 = XTransducerPositions_1_reg_944;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        grp_fu_256_p1 = ap_const_lv32_C1400000;
    end else begin
        grp_fu_256_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_267_p0 = remainder_fu_592_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state104))) begin
        grp_fu_267_p0 = reg_294;
    end else begin
        grp_fu_267_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        grp_fu_267_p1 = ap_const_lv32_43800000;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_267_p1 = ap_const_lv32_3C0B61FE;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_267_p1 = reg_294;
    end else begin
        grp_fu_267_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_277_p0 = p_0_i_reg_242;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_277_p0 = reg_307;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_277_p0 = tmp_2_reg_965;
    end else begin
        grp_fu_277_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state83))) begin
        grp_fu_277_p1 = ap_const_lv32_3C0B61FE;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_277_p1 = ap_const_lv32_447A0000;
    end else begin
        grp_fu_277_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) & (1'b0 == tmp_7_fu_378_p2))) begin
        grp_fu_284_opcode = ap_const_lv5_1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_284_opcode = ap_const_lv5_4;
    end else begin
        grp_fu_284_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        mask_table1_ce0 = 1'b1;
    end else begin
        mask_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        mask_table4_ce0 = 1'b1;
    end else begin
        mask_table4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        one_half_table2_ce0 = 1'b1;
    end else begin
        one_half_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (~(exitcond_fu_319_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if (~(1'b0 == tmp_7_fu_378_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state61 : begin
            if (~(1'b0 == tmp_11_reg_978)) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Delay_2_to_int_fu_342_p1 = reg_307;

assign XTransducerPositions_address0 = tmp_9_cast_fu_336_p1;

assign YTransducerPositions_address0 = tmp_9_cast_fu_336_p1;

assign addconv_i_fu_510_p2 = (tmp_3_i6_fu_504_p2 + loc_V_reg_993);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state103 = ap_CS_fsm[ap_const_lv32_66];

assign ap_CS_fsm_state104 = ap_CS_fsm[ap_const_lv32_67];

assign ap_CS_fsm_state107 = ap_CS_fsm[ap_const_lv32_6A];

assign ap_CS_fsm_state108 = ap_CS_fsm[ap_const_lv32_6B];

assign ap_CS_fsm_state109 = ap_CS_fsm[ap_const_lv32_6C];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state110 = ap_CS_fsm[ap_const_lv32_6D];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state42 = ap_CS_fsm[ap_const_lv32_29];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state58 = ap_CS_fsm[ap_const_lv32_39];

assign ap_CS_fsm_state59 = ap_CS_fsm[ap_const_lv32_3A];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state60 = ap_CS_fsm[ap_const_lv32_3B];

assign ap_CS_fsm_state61 = ap_CS_fsm[ap_const_lv32_3C];

assign ap_CS_fsm_state76 = ap_CS_fsm[ap_const_lv32_4B];

assign ap_CS_fsm_state77 = ap_CS_fsm[ap_const_lv32_4C];

assign ap_CS_fsm_state78 = ap_CS_fsm[ap_const_lv32_4D];

assign ap_CS_fsm_state79 = ap_CS_fsm[ap_const_lv32_4E];

assign ap_CS_fsm_state82 = ap_CS_fsm[ap_const_lv32_51];

assign ap_CS_fsm_state83 = ap_CS_fsm[ap_const_lv32_52];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_state98 = ap_CS_fsm[ap_const_lv32_61];

assign ap_CS_fsm_state99 = ap_CS_fsm[ap_const_lv32_62];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_319_p2 = ((i_reg_230 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign i_1_fu_325_p2 = (i_reg_230 + ap_const_lv3_1);

assign i_cast_fu_315_p1 = i_reg_230;

assign icmp_fu_855_p2 = ((tmp_29_fu_845_p4 != ap_const_lv24_0) ? 1'b1 : 1'b0);

assign index_V_1_fu_415_p4 = {{p_Val2_s_fu_389_p1[ap_const_lv32_1B : ap_const_lv32_17]}};

assign index_V_fu_624_p4 = {{t_V_4_fu_598_p1[ap_const_lv32_1B : ap_const_lv32_17]}};

assign isNeg_fu_754_p3 = sh_assign_fu_748_p2[ap_const_lv32_8];

assign loc_V_1_fu_411_p1 = p_Val2_s_fu_389_p1[22:0];

assign loc_V_2_fu_602_p4 = {{t_V_4_fu_598_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign loc_V_3_fu_664_p1 = p_Val2_12_fu_659_p2[22:0];

assign loc_V_5_fu_741_p1 = p_Val2_14_fu_727_p1[22:0];

assign mask_table1_address0 = tmp_9_i_i_fu_634_p1;

assign mask_table4_address0 = tmp_9_i_fu_425_p1;

assign notlhs_fu_360_p2 = ((tmp_3_fu_346_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs_fu_366_p2 = ((tmp_4_fu_356_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign one_half_cast_fu_655_p1 = one_half_table2_q0;

assign one_half_table2_address0 = tmp_9_i_i_fu_634_p1;

assign output_1_fu_895_p2 = (tmp_16_fu_889_p2 + output_reg_218);

assign p_Result_11_fu_640_p3 = t_V_4_reg_1048[ap_const_lv32_1F];

integer ap_tvar_int_0;

always @ (xf_sig_V_fu_435_p2) begin
    for (ap_tvar_int_0 = 23 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_16 - ap_const_lv32_0) begin
            p_Result_22_fu_440_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_22_fu_440_p4[ap_tvar_int_0] = xf_sig_V_fu_435_p2[ap_const_lv32_16 - ap_tvar_int_0];
        end
    end
end

assign p_Result_23_fu_465_p3 = {{ap_const_lv9_1FF}, {p_Result_22_reg_1023}};

assign p_Result_24_fu_489_p3 = {{p_Result_s_reg_987}, {ap_const_lv31_0}};

assign p_Result_25_fu_534_p4 = {{{p_Result_s_reg_987}, {xf_exp_V_fu_515_p3}}, {r_V_2_fu_528_p2}};

assign p_Result_26_fu_647_p3 = {{p_Result_11_fu_640_p3}, {ap_const_lv31_0}};

assign p_Result_27_fu_690_p3 = {{tmp_13_fu_680_p4}, {xs_sig_V_fu_674_p2}};

assign p_Result_28_fu_779_p3 = {{1'b1}, {loc_V_5_reg_1081}};

assign p_Val2_12_fu_659_p2 = (one_half_cast_fu_655_p1 + t_V_4_reg_1048);

assign p_Val2_14_fu_727_p1 = x_assign_1_fu_719_p3;

assign p_Val2_s_fu_389_p1 = grp_fu_277_p2;

assign p_cast_fu_869_p1 = p_s_fu_861_p3;

assign p_s_fu_861_p3 = ((icmp_fu_855_p2[0:0] === 1'b1) ? ap_const_lv8_0 : tmp_28_fu_841_p1);

assign r_V_2_fu_528_p2 = r_V_fu_523_p2 << tmp_18_fu_480_p1;

assign r_V_fu_523_p2 = xf_sig_V_reg_1017 << ap_const_lv23_1;

assign remainder_fu_592_p3 = ((tmp_i_reg_1028[0:0] === 1'b1) ? x_assign_reg_982 : sel_tmp7_i_reg_1033);

assign result_V_fu_834_p3 = ((isNeg_reg_1086[0:0] === 1'b1) ? tmp_19_cast_fu_820_p1 : tmp_14_fu_824_p4);

assign ret_i_i1_i_fu_543_p1 = p_Result_25_fu_534_p4;

assign ret_i_i_i_i_fu_496_p1 = p_Result_24_fu_489_p3;

assign sel_tmp1_fu_709_p2 = (tmp_5_i_i_reg_1054 ^ 1'b1);

assign sel_tmp2_fu_714_p2 = (tmp_7_i_i_reg_1060 & sel_tmp1_fu_709_p2);

assign sel_tmp2_i_fu_564_p2 = (tmp7_fu_559_p2 & tmp_fu_553_p2);

assign sel_tmp3_i_fu_570_p3 = ((sel_tmp2_i_fu_564_p2[0:0] === 1'b1) ? ap_const_lv32_7FFFFFFF : ret_i_i_i_i_fu_496_p1);

assign sel_tmp6_demorgan_i_fu_578_p2 = (tmp_i_fu_450_p2 | tmp_6_i_fu_455_p2);

assign sel_tmp7_i_fu_584_p3 = ((sel_tmp6_demorgan_i_fu_578_p2[0:0] === 1'b1) ? sel_tmp3_i_fu_570_p3 : ret_i_i1_i_fu_543_p1);

assign sel_tmp_fu_705_p1 = sel_tmp_v_fu_698_p3;

assign sel_tmp_i_fu_547_p2 = (tmp_i_fu_450_p2 ^ 1'b1);

assign sel_tmp_v_fu_698_p3 = ((tmp_5_i_i_reg_1054[0:0] === 1'b1) ? p_Result_26_fu_647_p3 : p_Result_27_fu_690_p3);

assign sh_assign_1_cast_cas_fu_793_p1 = $signed(sh_assign_1_reg_1091);

assign sh_assign_1_cast_fu_790_p1 = $signed(sh_assign_1_reg_1091);

assign sh_assign_1_fu_771_p3 = ((isNeg_fu_754_p3[0:0] === 1'b1) ? tmp_14_i_i_cast_fu_767_p1 : sh_assign_fu_748_p2);

assign sh_assign_fu_748_p2 = ($signed(ap_const_lv9_181) + $signed(tmp_i_i_i_cast8_fu_745_p1));

assign t_V_4_fu_598_p1 = grp_fu_267_p2;

assign tmp7_fu_559_p2 = (tmp_i_i4_reg_1012 & tmp_i_i_fu_460_p2);

assign tmp_11_fu_383_p2 = (tmp_5_fu_372_p2 & grp_fu_284_p2);

assign tmp_13_fu_680_p4 = {{p_Val2_12_fu_659_p2[ap_const_lv32_1F : ap_const_lv32_17]}};

assign tmp_14_fu_824_p4 = {{tmp_17_i_i_fu_806_p2[ap_const_lv32_36 : ap_const_lv32_17]}};

assign tmp_14_i_i_cast_fu_767_p1 = $signed(tmp_14_i_i_fu_762_p2);

assign tmp_14_i_i_fu_762_p2 = (ap_const_lv8_7F - loc_V_4_reg_1075);

assign tmp_15_cast_fu_885_p1 = tmp_15_fu_877_p3;

assign tmp_15_fu_877_p3 = {{tmp_30_fu_873_p1}, {ap_const_lv3_0}};

assign tmp_15_i_i_fu_796_p1 = $unsigned(sh_assign_1_cast_fu_790_p1);

assign tmp_16_fu_889_p2 = p_cast_fu_869_p1 << tmp_15_cast_fu_885_p1;

assign tmp_16_i_i_fu_800_p2 = p_Result_28_fu_779_p3 >> sh_assign_1_cast_cas_fu_793_p1;

assign tmp_17_i_i_fu_806_p2 = tmp_i_i_41_fu_786_p1 << tmp_15_i_i_fu_796_p1;

assign tmp_18_fu_480_p1 = zeros_fu_472_p3[22:0];

assign tmp_19_cast_fu_820_p1 = tmp_27_fu_812_p3;

assign tmp_19_fu_500_p1 = zeros_fu_472_p3[7:0];

assign tmp_27_fu_812_p3 = tmp_16_i_i_fu_800_p2[ap_const_lv32_17];

assign tmp_28_fu_841_p1 = result_V_fu_834_p3[7:0];

assign tmp_29_fu_845_p4 = {{result_V_fu_834_p3[ap_const_lv32_1F : ap_const_lv32_8]}};

assign tmp_2_i_fu_484_p2 = ((xf_sig_V_reg_1017 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign tmp_2_i_i_fu_668_p2 = (mask_table1_q0 ^ ap_const_lv23_7FFFFF);

assign tmp_30_fu_873_p1 = i_reg_230[1:0];

assign tmp_3_fu_346_p4 = {{Delay_2_to_int_fu_342_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_3_i6_fu_504_p2 = (tmp_19_fu_500_p1 ^ ap_const_lv8_FF);

assign tmp_4_fu_356_p1 = Delay_2_to_int_fu_342_p1[22:0];

assign tmp_5_fu_372_p2 = (notrhs_fu_366_p2 | notlhs_fu_360_p2);

assign tmp_5_i_i_fu_612_p2 = ((loc_V_2_fu_602_p4 < ap_const_lv8_7E) ? 1'b1 : 1'b0);

assign tmp_6_i_fu_455_p2 = ((loc_V_reg_993 > ap_const_lv8_96) ? 1'b1 : 1'b0);

assign tmp_7_fu_378_p2 = (tmp_5_fu_372_p2 & tmp_6_reg_970);

assign tmp_7_i_i_fu_618_p2 = ((loc_V_2_fu_602_p4 > ap_const_lv8_96) ? 1'b1 : 1'b0);

assign tmp_9_cast_fu_336_p1 = $signed(tmp_9_fu_331_p2);

assign tmp_9_fu_331_p2 = (Offset_read_reg_901 + i_cast_fu_315_p1);

assign tmp_9_i_fu_425_p1 = index_V_1_fu_415_p4;

assign tmp_9_i_i_fu_634_p1 = index_V_fu_624_p4;

assign tmp_fu_553_p2 = (tmp_6_i_fu_455_p2 & sel_tmp_i_fu_547_p2);

assign tmp_i_fu_450_p2 = ((loc_V_reg_993 < ap_const_lv8_7F) ? 1'b1 : 1'b0);

assign tmp_i_i4_fu_430_p2 = ((loc_V_1_reg_1001 != ap_const_lv23_0) ? 1'b1 : 1'b0);

assign tmp_i_i_41_fu_786_p1 = p_Result_28_fu_779_p3;

assign tmp_i_i_fu_460_p2 = ((loc_V_reg_993 == ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign tmp_i_i_i_cast8_fu_745_p1 = loc_V_4_reg_1075;

assign x_assign_1_fu_719_p3 = ((sel_tmp2_fu_714_p2[0:0] === 1'b1) ? reg_302 : sel_tmp_fu_705_p1);

assign xf_exp_V_fu_515_p3 = ((tmp_2_i_fu_484_p2[0:0] === 1'b1) ? ap_const_lv8_0 : addconv_i_fu_510_p2);

assign xf_sig_V_fu_435_p2 = (mask_table4_q0 & loc_V_1_reg_1001);

assign xs_sig_V_fu_674_p2 = (loc_V_3_fu_664_p1 & tmp_2_i_i_fu_668_p2);


always @ (p_Result_23_fu_465_p3) begin
    if (p_Result_23_fu_465_p3[0] == 1'b1) begin
        zeros_fu_472_p3 = 32'd0;
    end else if (p_Result_23_fu_465_p3[1] == 1'b1) begin
        zeros_fu_472_p3 = 32'd1;
    end else if (p_Result_23_fu_465_p3[2] == 1'b1) begin
        zeros_fu_472_p3 = 32'd2;
    end else if (p_Result_23_fu_465_p3[3] == 1'b1) begin
        zeros_fu_472_p3 = 32'd3;
    end else if (p_Result_23_fu_465_p3[4] == 1'b1) begin
        zeros_fu_472_p3 = 32'd4;
    end else if (p_Result_23_fu_465_p3[5] == 1'b1) begin
        zeros_fu_472_p3 = 32'd5;
    end else if (p_Result_23_fu_465_p3[6] == 1'b1) begin
        zeros_fu_472_p3 = 32'd6;
    end else if (p_Result_23_fu_465_p3[7] == 1'b1) begin
        zeros_fu_472_p3 = 32'd7;
    end else if (p_Result_23_fu_465_p3[8] == 1'b1) begin
        zeros_fu_472_p3 = 32'd8;
    end else if (p_Result_23_fu_465_p3[9] == 1'b1) begin
        zeros_fu_472_p3 = 32'd9;
    end else if (p_Result_23_fu_465_p3[10] == 1'b1) begin
        zeros_fu_472_p3 = 32'd10;
    end else if (p_Result_23_fu_465_p3[11] == 1'b1) begin
        zeros_fu_472_p3 = 32'd11;
    end else if (p_Result_23_fu_465_p3[12] == 1'b1) begin
        zeros_fu_472_p3 = 32'd12;
    end else if (p_Result_23_fu_465_p3[13] == 1'b1) begin
        zeros_fu_472_p3 = 32'd13;
    end else if (p_Result_23_fu_465_p3[14] == 1'b1) begin
        zeros_fu_472_p3 = 32'd14;
    end else if (p_Result_23_fu_465_p3[15] == 1'b1) begin
        zeros_fu_472_p3 = 32'd15;
    end else if (p_Result_23_fu_465_p3[16] == 1'b1) begin
        zeros_fu_472_p3 = 32'd16;
    end else if (p_Result_23_fu_465_p3[17] == 1'b1) begin
        zeros_fu_472_p3 = 32'd17;
    end else if (p_Result_23_fu_465_p3[18] == 1'b1) begin
        zeros_fu_472_p3 = 32'd18;
    end else if (p_Result_23_fu_465_p3[19] == 1'b1) begin
        zeros_fu_472_p3 = 32'd19;
    end else if (p_Result_23_fu_465_p3[20] == 1'b1) begin
        zeros_fu_472_p3 = 32'd20;
    end else if (p_Result_23_fu_465_p3[21] == 1'b1) begin
        zeros_fu_472_p3 = 32'd21;
    end else if (p_Result_23_fu_465_p3[22] == 1'b1) begin
        zeros_fu_472_p3 = 32'd22;
    end else if (p_Result_23_fu_465_p3[23] == 1'b1) begin
        zeros_fu_472_p3 = 32'd23;
    end else if (p_Result_23_fu_465_p3[24] == 1'b1) begin
        zeros_fu_472_p3 = 32'd24;
    end else if (p_Result_23_fu_465_p3[25] == 1'b1) begin
        zeros_fu_472_p3 = 32'd25;
    end else if (p_Result_23_fu_465_p3[26] == 1'b1) begin
        zeros_fu_472_p3 = 32'd26;
    end else if (p_Result_23_fu_465_p3[27] == 1'b1) begin
        zeros_fu_472_p3 = 32'd27;
    end else if (p_Result_23_fu_465_p3[28] == 1'b1) begin
        zeros_fu_472_p3 = 32'd28;
    end else if (p_Result_23_fu_465_p3[29] == 1'b1) begin
        zeros_fu_472_p3 = 32'd29;
    end else if (p_Result_23_fu_465_p3[30] == 1'b1) begin
        zeros_fu_472_p3 = 32'd30;
    end else if (p_Result_23_fu_465_p3[31] == 1'b1) begin
        zeros_fu_472_p3 = 32'd31;
    end else begin
        zeros_fu_472_p3 = 32'd32;
    end
end

endmodule //CalculatePhase
