-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CalculatePhase is
generic (
    C_S_AXI_CRTLS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CRTLS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_crtls_AWVALID : IN STD_LOGIC;
    s_axi_crtls_AWREADY : OUT STD_LOGIC;
    s_axi_crtls_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_ADDR_WIDTH-1 downto 0);
    s_axi_crtls_WVALID : IN STD_LOGIC;
    s_axi_crtls_WREADY : OUT STD_LOGIC;
    s_axi_crtls_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH-1 downto 0);
    s_axi_crtls_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH/8-1 downto 0);
    s_axi_crtls_ARVALID : IN STD_LOGIC;
    s_axi_crtls_ARREADY : OUT STD_LOGIC;
    s_axi_crtls_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_ADDR_WIDTH-1 downto 0);
    s_axi_crtls_RVALID : OUT STD_LOGIC;
    s_axi_crtls_RREADY : IN STD_LOGIC;
    s_axi_crtls_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH-1 downto 0);
    s_axi_crtls_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_crtls_BVALID : OUT STD_LOGIC;
    s_axi_crtls_BREADY : IN STD_LOGIC;
    s_axi_crtls_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of CalculatePhase is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CalculatePhase,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.419400,HLS_SYN_LAT=357,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=10,HLS_SYN_FF=2955,HLS_SYN_LUT=5102}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (109 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (109 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (109 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (109 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (109 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (109 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (109 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (109 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (109 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (109 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (109 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_C1400000 : STD_LOGIC_VECTOR (31 downto 0) := "11000001010000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_3C0B61FE : STD_LOGIC_VECTOR (31 downto 0) := "00111100000010110110000111111110";
    constant ap_const_lv32_43800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011100000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_447A0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000100011110100000000000000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal T_X : STD_LOGIC_VECTOR (31 downto 0);
    signal T_Y : STD_LOGIC_VECTOR (31 downto 0);
    signal T_Z : STD_LOGIC_VECTOR (31 downto 0);
    signal Offset : STD_LOGIC_VECTOR (7 downto 0);
    signal XTransducerPositions_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal XTransducerPositions_ce0 : STD_LOGIC;
    signal XTransducerPositions_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal YTransducerPositions_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal YTransducerPositions_ce0 : STD_LOGIC;
    signal YTransducerPositions_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_table4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table4_ce0 : STD_LOGIC;
    signal mask_table4_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal mask_table1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table1_ce0 : STD_LOGIC;
    signal mask_table1_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal one_half_table2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal one_half_table2_ce0 : STD_LOGIC;
    signal one_half_table2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal Offset_read_reg_901 : STD_LOGIC_VECTOR (7 downto 0);
    signal T_Y_read_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_X_read_reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal Zdist_sq_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_1_fu_325_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_929 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal XTransducerPositions_1_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal YTransducerPositions_1_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ydist_sq_reg_954 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ydist_sq_1_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_965 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_970 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal tmp_11_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal tmp_7_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_reg_982 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal p_Result_s_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_reg_993 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_1_fu_411_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_1001 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_i_i4_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i4_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal xf_sig_V_fu_435_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal xf_sig_V_reg_1017 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_22_fu_440_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_22_reg_1023 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_i_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal sel_tmp7_i_fu_584_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp7_i_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal remainder_fu_592_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal t_V_4_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_4_reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_reg_1054 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_i_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_i_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_4_reg_1075 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal loc_V_5_fu_741_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_5_reg_1081 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_754_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal sh_assign_1_fu_771_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_1091 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_1_fu_895_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal output_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_230 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0_i_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal tmp_9_cast_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal grp_fu_267_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal i_cast_fu_315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Delay_2_to_int_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_346_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_356_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_V_1_fu_415_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_23_fu_465_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zeros_fu_472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_24_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_500_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_i6_fu_504_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addconv_i_fu_510_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_523_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_18_fu_480_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal xf_exp_V_fu_515_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_528_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_25_fu_534_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_i_i_i_i_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_demorgan_i_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_570_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_i_i1_i_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_2_fu_602_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_V_fu_624_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_11_fu_640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal one_half_cast_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_3_fu_664_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_2_i_i_fu_668_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_680_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal xs_sig_V_fu_674_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_26_fu_647_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_27_fu_690_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_v_fu_698_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_705_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_fu_719_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_cast8_fu_745_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_748_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_i_i_fu_762_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_i_i_cast_fu_767_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_28_fu_779_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sh_assign_1_cast_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_793_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_41_fu_786_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_15_i_i_fu_796_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_16_i_i_fu_800_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_27_fu_812_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_i_fu_806_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_19_cast_fu_820_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_824_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_834_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_845_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_841_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_861_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_873_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_fu_877_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast_fu_869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_cast_fu_885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_889_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_284_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (109 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component CalculatePhase_fag8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CalculatePhase_fshbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CalculatePhase_fmibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CalculatePhase_fdjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CalculatePhase_fckbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CalculatePhase_fslbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CalculatePhase_XTbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CalculatePhase_YTcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CalculatePhase_madEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component CalculatePhase_onfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CalculatePhase_crtls_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        T_X : OUT STD_LOGIC_VECTOR (31 downto 0);
        T_Y : OUT STD_LOGIC_VECTOR (31 downto 0);
        T_Z : OUT STD_LOGIC_VECTOR (31 downto 0);
        Offset : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    XTransducerPositions_U : component CalculatePhase_XTbkb
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => XTransducerPositions_address0,
        ce0 => XTransducerPositions_ce0,
        q0 => XTransducerPositions_q0);

    YTransducerPositions_U : component CalculatePhase_YTcud
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => YTransducerPositions_address0,
        ce0 => YTransducerPositions_ce0,
        q0 => YTransducerPositions_q0);

    mask_table4_U : component CalculatePhase_madEe
    generic map (
        DataWidth => 23,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mask_table4_address0,
        ce0 => mask_table4_ce0,
        q0 => mask_table4_q0);

    mask_table1_U : component CalculatePhase_madEe
    generic map (
        DataWidth => 23,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mask_table1_address0,
        ce0 => mask_table1_ce0,
        q0 => mask_table1_q0);

    one_half_table2_U : component CalculatePhase_onfYi
    generic map (
        DataWidth => 24,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => one_half_table2_address0,
        ce0 => one_half_table2_ce0,
        q0 => one_half_table2_q0);

    CalculatePhase_crtls_s_axi_U : component CalculatePhase_crtls_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTLS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTLS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_crtls_AWVALID,
        AWREADY => s_axi_crtls_AWREADY,
        AWADDR => s_axi_crtls_AWADDR,
        WVALID => s_axi_crtls_WVALID,
        WREADY => s_axi_crtls_WREADY,
        WDATA => s_axi_crtls_WDATA,
        WSTRB => s_axi_crtls_WSTRB,
        ARVALID => s_axi_crtls_ARVALID,
        ARREADY => s_axi_crtls_ARREADY,
        ARADDR => s_axi_crtls_ARADDR,
        RVALID => s_axi_crtls_RVALID,
        RREADY => s_axi_crtls_RREADY,
        RDATA => s_axi_crtls_RDATA,
        RRESP => s_axi_crtls_RRESP,
        BVALID => s_axi_crtls_BVALID,
        BREADY => s_axi_crtls_BREADY,
        BRESP => s_axi_crtls_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => output_reg_218,
        T_X => T_X,
        T_Y => T_Y,
        T_Z => T_Z,
        Offset => Offset);

    CalculatePhase_fag8j_U0 : component CalculatePhase_fag8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_256_p0,
        din1 => grp_fu_256_p1,
        opcode => grp_fu_256_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_256_p2);

    CalculatePhase_fshbi_U1 : component CalculatePhase_fshbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => T_Y_read_reg_911,
        din1 => YTransducerPositions_1_reg_949,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    CalculatePhase_fmibs_U2 : component CalculatePhase_fmibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_267_p0,
        din1 => grp_fu_267_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_267_p2);

    CalculatePhase_fmibs_U3 : component CalculatePhase_fmibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => Ydist_sq_reg_954,
        din1 => Ydist_sq_reg_954,
        ce => ap_const_logic_1,
        dout => grp_fu_271_p2);

    CalculatePhase_fdjbC_U4 : component CalculatePhase_fdjbC
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_277_p0,
        din1 => grp_fu_277_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_277_p2);

    CalculatePhase_fckbM_U5 : component CalculatePhase_fckbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_307,
        din1 => ap_const_lv32_3C0B61FE,
        opcode => grp_fu_284_opcode,
        dout => grp_fu_284_p2);

    CalculatePhase_fslbW_U6 : component CalculatePhase_fslbW
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => reg_294,
        ce => ap_const_logic_1,
        dout => grp_fu_289_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state110))) then 
                i_reg_230 <= i_1_reg_929;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                i_reg_230 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    output_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state110))) then 
                output_reg_218 <= output_1_fu_895_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                output_reg_218 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0_i_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state61) and not((ap_const_lv1_0 = tmp_11_reg_978)))) then 
                p_0_i_reg_242 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state60) and not((ap_const_lv1_0 = tmp_7_fu_378_p2)))) then 
                p_0_i_reg_242 <= reg_307;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state82))) then 
                p_0_i_reg_242 <= grp_fu_267_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                Offset_read_reg_901 <= Offset;
                T_X_read_reg_916 <= T_X;
                T_Y_read_reg_911 <= T_Y;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then
                XTransducerPositions_1_reg_944 <= XTransducerPositions_q0;
                YTransducerPositions_1_reg_949 <= YTransducerPositions_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then
                Ydist_sq_1_reg_960 <= grp_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                Ydist_sq_reg_954 <= grp_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                Zdist_sq_reg_921 <= grp_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                i_1_reg_929 <= i_1_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state109))) then
                isNeg_reg_1086 <= sh_assign_fu_748_p2(8 downto 8);
                sh_assign_1_reg_1091 <= sh_assign_1_fu_771_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state76))) then
                loc_V_1_reg_1001 <= loc_V_1_fu_411_p1;
                loc_V_reg_993 <= p_Val2_s_fu_389_p1(30 downto 23);
                p_Result_s_reg_987 <= p_Val2_s_fu_389_p1(31 downto 31);
                x_assign_reg_982 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state108))) then
                loc_V_4_reg_1075 <= p_Val2_14_fu_727_p1(30 downto 23);
                loc_V_5_reg_1081 <= loc_V_5_fu_741_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state77))) then
                p_Result_22_reg_1023 <= p_Result_22_fu_440_p4;
                tmp_i_i4_reg_1012 <= tmp_i_i4_fu_430_p2;
                xf_sig_V_reg_1017 <= xf_sig_V_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = ap_CS_fsm_state30)) or ((ap_const_lv1_1 = ap_CS_fsm_state103)))) then
                reg_294 <= grp_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state107)))) then
                reg_302 <= grp_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state58)) or ((ap_const_lv1_1 = ap_CS_fsm_state98)))) then
                reg_307 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state78))) then
                sel_tmp7_i_reg_1033 <= sel_tmp7_i_fu_584_p3;
                tmp_i_reg_1028 <= tmp_i_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state107))) then
                t_V_4_reg_1048 <= t_V_4_fu_598_p1;
                tmp_5_i_i_reg_1054 <= tmp_5_i_i_fu_612_p2;
                tmp_7_i_i_reg_1060 <= tmp_7_i_i_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state60) and (ap_const_lv1_0 = tmp_7_fu_378_p2))) then
                tmp_11_reg_978 <= tmp_11_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42))) then
                tmp_2_reg_965 <= grp_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state59))) then
                tmp_6_reg_970 <= grp_fu_284_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_319_p2, tmp_11_reg_978, tmp_7_fu_378_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (not((exitcond_fu_319_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (not((ap_const_lv1_0 = tmp_7_fu_378_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                if (not((ap_const_lv1_0 = tmp_11_reg_978))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Delay_2_to_int_fu_342_p1 <= reg_307;
    XTransducerPositions_address0 <= tmp_9_cast_fu_336_p1(6 - 1 downto 0);

    XTransducerPositions_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            XTransducerPositions_ce0 <= ap_const_logic_1;
        else 
            XTransducerPositions_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    YTransducerPositions_address0 <= tmp_9_cast_fu_336_p1(6 - 1 downto 0);

    YTransducerPositions_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            YTransducerPositions_ce0 <= ap_const_logic_1;
        else 
            YTransducerPositions_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    addconv_i_fu_510_p2 <= std_logic_vector(unsigned(tmp_3_i6_fu_504_p2) + unsigned(loc_V_reg_993));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state103 <= ap_CS_fsm(102 downto 102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103 downto 103);
    ap_CS_fsm_state107 <= ap_CS_fsm(106 downto 106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107 downto 107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108 downto 108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109 downto 109);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state30 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state42 <= ap_CS_fsm(41 downto 41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42 downto 42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state58 <= ap_CS_fsm(57 downto 57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58 downto 58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59 downto 59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60 downto 60);
    ap_CS_fsm_state76 <= ap_CS_fsm(75 downto 75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76 downto 76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77 downto 77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78 downto 78);
    ap_CS_fsm_state82 <= ap_CS_fsm(81 downto 81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82 downto 82);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_state98 <= ap_CS_fsm(97 downto 97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98 downto 98);

    ap_done_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_319_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((exitcond_fu_319_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_319_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((exitcond_fu_319_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond_fu_319_p2 <= "1" when (i_reg_230 = ap_const_lv3_4) else "0";

    grp_fu_256_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state99)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state99)))) then 
            grp_fu_256_opcode <= ap_const_lv2_1;
        elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state21)) or ((ap_const_lv1_1 = ap_CS_fsm_state26)))) then 
            grp_fu_256_opcode <= ap_const_lv2_0;
        else 
            grp_fu_256_opcode <= "XX";
        end if; 
    end process;


    grp_fu_256_p0_assign_proc : process(ap_CS_fsm_state1, T_Z, reg_294, reg_302, T_X_read_reg_916, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state99)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state99))) then 
            grp_fu_256_p0 <= ap_const_lv32_3F800000;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            grp_fu_256_p0 <= reg_294;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_256_p0 <= reg_302;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            grp_fu_256_p0 <= T_X_read_reg_916;
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            grp_fu_256_p0 <= T_Z;
        else 
            grp_fu_256_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_256_p1_assign_proc : process(ap_CS_fsm_state1, reg_307, Zdist_sq_reg_921, XTransducerPositions_1_reg_944, Ydist_sq_1_reg_960, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state99)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state99))) then 
            grp_fu_256_p1 <= reg_307;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            grp_fu_256_p1 <= Zdist_sq_reg_921;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_256_p1 <= Ydist_sq_1_reg_960;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            grp_fu_256_p1 <= XTransducerPositions_1_reg_944;
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            grp_fu_256_p1 <= ap_const_lv32_C1400000;
        else 
            grp_fu_256_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_267_p0_assign_proc : process(reg_294, remainder_fu_592_p3, ap_CS_fsm_state79, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state104)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state79))) then 
            grp_fu_267_p0 <= remainder_fu_592_p3;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state104)))) then 
            grp_fu_267_p0 <= reg_294;
        else 
            grp_fu_267_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_267_p1_assign_proc : process(reg_294, ap_CS_fsm_state79, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state104)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state104))) then 
            grp_fu_267_p1 <= ap_const_lv32_43800000;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state79))) then 
            grp_fu_267_p1 <= ap_const_lv32_3C0B61FE;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)))) then 
            grp_fu_267_p1 <= reg_294;
        else 
            grp_fu_267_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_277_p0_assign_proc : process(reg_307, tmp_2_reg_965, p_0_i_reg_242, ap_CS_fsm_state61, ap_CS_fsm_state43, ap_CS_fsm_state83)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state83))) then 
            grp_fu_277_p0 <= p_0_i_reg_242;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state61))) then 
            grp_fu_277_p0 <= reg_307;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            grp_fu_277_p0 <= tmp_2_reg_965;
        else 
            grp_fu_277_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_277_p1_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state43, ap_CS_fsm_state83)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state61)) or ((ap_const_lv1_1 = ap_CS_fsm_state83)))) then 
            grp_fu_277_p1 <= ap_const_lv32_3C0B61FE;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            grp_fu_277_p1 <= ap_const_lv32_447A0000;
        else 
            grp_fu_277_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_284_opcode_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state60, tmp_7_fu_378_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state60) and (ap_const_lv1_0 = tmp_7_fu_378_p2))) then 
            grp_fu_284_opcode <= ap_const_lv5_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
            grp_fu_284_opcode <= ap_const_lv5_4;
        else 
            grp_fu_284_opcode <= "XXXXX";
        end if; 
    end process;

    i_1_fu_325_p2 <= std_logic_vector(unsigned(i_reg_230) + unsigned(ap_const_lv3_1));
    i_cast_fu_315_p1 <= std_logic_vector(resize(unsigned(i_reg_230),8));
    icmp_fu_855_p2 <= "0" when (tmp_29_fu_845_p4 = ap_const_lv24_0) else "1";
    index_V_1_fu_415_p4 <= p_Val2_s_fu_389_p1(27 downto 23);
    index_V_fu_624_p4 <= t_V_4_fu_598_p1(27 downto 23);
    isNeg_fu_754_p3 <= sh_assign_fu_748_p2(8 downto 8);
    loc_V_1_fu_411_p1 <= p_Val2_s_fu_389_p1(23 - 1 downto 0);
    loc_V_2_fu_602_p4 <= t_V_4_fu_598_p1(30 downto 23);
    loc_V_3_fu_664_p1 <= p_Val2_12_fu_659_p2(23 - 1 downto 0);
    loc_V_5_fu_741_p1 <= p_Val2_14_fu_727_p1(23 - 1 downto 0);
    mask_table1_address0 <= tmp_9_i_i_fu_634_p1(5 - 1 downto 0);

    mask_table1_ce0_assign_proc : process(ap_CS_fsm_state107)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state107))) then 
            mask_table1_ce0 <= ap_const_logic_1;
        else 
            mask_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mask_table4_address0 <= tmp_9_i_fu_425_p1(5 - 1 downto 0);

    mask_table4_ce0_assign_proc : process(ap_CS_fsm_state76)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state76))) then 
            mask_table4_ce0 <= ap_const_logic_1;
        else 
            mask_table4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs_fu_360_p2 <= "0" when (tmp_3_fu_346_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_366_p2 <= "1" when (tmp_4_fu_356_p1 = ap_const_lv23_0) else "0";
    one_half_cast_fu_655_p1 <= std_logic_vector(resize(unsigned(one_half_table2_q0),32));
    one_half_table2_address0 <= tmp_9_i_i_fu_634_p1(5 - 1 downto 0);

    one_half_table2_ce0_assign_proc : process(ap_CS_fsm_state107)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state107))) then 
            one_half_table2_ce0 <= ap_const_logic_1;
        else 
            one_half_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_fu_895_p2 <= std_logic_vector(unsigned(tmp_16_fu_889_p2) + unsigned(output_reg_218));
    p_Result_11_fu_640_p3 <= t_V_4_reg_1048(31 downto 31);
    
    p_Result_22_fu_440_p4_proc : process(xf_sig_V_fu_435_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(23+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(23+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(23 - 1 downto 0);
    variable p_Result_22_fu_440_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(23 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(23 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(23 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_16(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := xf_sig_V_fu_435_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(23-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(23-1-unsigned(ap_const_lv32_16(5-1 downto 0)));
            for p_Result_22_fu_440_p4_i in 0 to 23-1 loop
                v0_cpy(p_Result_22_fu_440_p4_i) := xf_sig_V_fu_435_p2(23-1-p_Result_22_fu_440_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(23-1 downto 0)))));
        res_mask := res_mask(23-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_22_fu_440_p4 <= resvalue(23-1 downto 0);
    end process;

    p_Result_23_fu_465_p3 <= (ap_const_lv9_1FF & p_Result_22_reg_1023);
    p_Result_24_fu_489_p3 <= (p_Result_s_reg_987 & ap_const_lv31_0);
    p_Result_25_fu_534_p4 <= ((p_Result_s_reg_987 & xf_exp_V_fu_515_p3) & r_V_2_fu_528_p2);
    p_Result_26_fu_647_p3 <= (p_Result_11_fu_640_p3 & ap_const_lv31_0);
    p_Result_27_fu_690_p3 <= (tmp_13_fu_680_p4 & xs_sig_V_fu_674_p2);
    p_Result_28_fu_779_p3 <= (ap_const_lv1_1 & loc_V_5_reg_1081);
    p_Val2_12_fu_659_p2 <= std_logic_vector(unsigned(one_half_cast_fu_655_p1) + unsigned(t_V_4_reg_1048));
    p_Val2_14_fu_727_p1 <= x_assign_1_fu_719_p3;
    p_Val2_s_fu_389_p1 <= grp_fu_277_p2;
    p_cast_fu_869_p1 <= std_logic_vector(resize(unsigned(p_s_fu_861_p3),32));
    p_s_fu_861_p3 <= 
        ap_const_lv8_0 when (icmp_fu_855_p2(0) = '1') else 
        tmp_28_fu_841_p1;
    r_V_2_fu_528_p2 <= std_logic_vector(shift_left(unsigned(r_V_fu_523_p2),to_integer(unsigned('0' & tmp_18_fu_480_p1(23-1 downto 0)))));
    r_V_fu_523_p2 <= std_logic_vector(shift_left(unsigned(xf_sig_V_reg_1017),to_integer(unsigned('0' & ap_const_lv23_1(23-1 downto 0)))));
    remainder_fu_592_p3 <= 
        x_assign_reg_982 when (tmp_i_reg_1028(0) = '1') else 
        sel_tmp7_i_reg_1033;
    result_V_fu_834_p3 <= 
        tmp_19_cast_fu_820_p1 when (isNeg_reg_1086(0) = '1') else 
        tmp_14_fu_824_p4;
    ret_i_i1_i_fu_543_p1 <= p_Result_25_fu_534_p4;
    ret_i_i_i_i_fu_496_p1 <= p_Result_24_fu_489_p3;
    sel_tmp1_fu_709_p2 <= (tmp_5_i_i_reg_1054 xor ap_const_lv1_1);
    sel_tmp2_fu_714_p2 <= (tmp_7_i_i_reg_1060 and sel_tmp1_fu_709_p2);
    sel_tmp2_i_fu_564_p2 <= (tmp7_fu_559_p2 and tmp_fu_553_p2);
    sel_tmp3_i_fu_570_p3 <= 
        ap_const_lv32_7FFFFFFF when (sel_tmp2_i_fu_564_p2(0) = '1') else 
        ret_i_i_i_i_fu_496_p1;
    sel_tmp6_demorgan_i_fu_578_p2 <= (tmp_i_fu_450_p2 or tmp_6_i_fu_455_p2);
    sel_tmp7_i_fu_584_p3 <= 
        sel_tmp3_i_fu_570_p3 when (sel_tmp6_demorgan_i_fu_578_p2(0) = '1') else 
        ret_i_i1_i_fu_543_p1;
    sel_tmp_fu_705_p1 <= sel_tmp_v_fu_698_p3;
    sel_tmp_i_fu_547_p2 <= (tmp_i_fu_450_p2 xor ap_const_lv1_1);
    sel_tmp_v_fu_698_p3 <= 
        p_Result_26_fu_647_p3 when (tmp_5_i_i_reg_1054(0) = '1') else 
        p_Result_27_fu_690_p3;
        sh_assign_1_cast_cas_fu_793_p1 <= std_logic_vector(resize(signed(sh_assign_1_reg_1091),24));

        sh_assign_1_cast_fu_790_p1 <= std_logic_vector(resize(signed(sh_assign_1_reg_1091),32));

    sh_assign_1_fu_771_p3 <= 
        tmp_14_i_i_cast_fu_767_p1 when (isNeg_fu_754_p3(0) = '1') else 
        sh_assign_fu_748_p2;
    sh_assign_fu_748_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast8_fu_745_p1));
    t_V_4_fu_598_p1 <= grp_fu_267_p2;
    tmp7_fu_559_p2 <= (tmp_i_i4_reg_1012 and tmp_i_i_fu_460_p2);
    tmp_11_fu_383_p2 <= (tmp_5_fu_372_p2 and grp_fu_284_p2);
    tmp_13_fu_680_p4 <= p_Val2_12_fu_659_p2(31 downto 23);
    tmp_14_fu_824_p4 <= tmp_17_i_i_fu_806_p2(54 downto 23);
        tmp_14_i_i_cast_fu_767_p1 <= std_logic_vector(resize(signed(tmp_14_i_i_fu_762_p2),9));

    tmp_14_i_i_fu_762_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_4_reg_1075));
    tmp_15_cast_fu_885_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_877_p3),32));
    tmp_15_fu_877_p3 <= (tmp_30_fu_873_p1 & ap_const_lv3_0);
    tmp_15_i_i_fu_796_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_790_p1),78));
    tmp_16_fu_889_p2 <= std_logic_vector(shift_left(unsigned(p_cast_fu_869_p1),to_integer(unsigned('0' & tmp_15_cast_fu_885_p1(31-1 downto 0)))));
    tmp_16_i_i_fu_800_p2 <= std_logic_vector(shift_right(unsigned(p_Result_28_fu_779_p3),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_793_p1(24-1 downto 0)))));
    tmp_17_i_i_fu_806_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_41_fu_786_p1),to_integer(unsigned('0' & tmp_15_i_i_fu_796_p1(31-1 downto 0)))));
    tmp_18_fu_480_p1 <= zeros_fu_472_p3(23 - 1 downto 0);
    tmp_19_cast_fu_820_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_812_p3),32));
    tmp_19_fu_500_p1 <= zeros_fu_472_p3(8 - 1 downto 0);
    tmp_27_fu_812_p3 <= tmp_16_i_i_fu_800_p2(23 downto 23);
    tmp_28_fu_841_p1 <= result_V_fu_834_p3(8 - 1 downto 0);
    tmp_29_fu_845_p4 <= result_V_fu_834_p3(31 downto 8);
    tmp_2_i_fu_484_p2 <= "1" when (xf_sig_V_reg_1017 = ap_const_lv23_0) else "0";
    tmp_2_i_i_fu_668_p2 <= (mask_table1_q0 xor ap_const_lv23_7FFFFF);
    tmp_30_fu_873_p1 <= i_reg_230(2 - 1 downto 0);
    tmp_3_fu_346_p4 <= Delay_2_to_int_fu_342_p1(30 downto 23);
    tmp_3_i6_fu_504_p2 <= (tmp_19_fu_500_p1 xor ap_const_lv8_FF);
    tmp_4_fu_356_p1 <= Delay_2_to_int_fu_342_p1(23 - 1 downto 0);
    tmp_5_fu_372_p2 <= (notrhs_fu_366_p2 or notlhs_fu_360_p2);
    tmp_5_i_i_fu_612_p2 <= "1" when (unsigned(loc_V_2_fu_602_p4) < unsigned(ap_const_lv8_7E)) else "0";
    tmp_6_i_fu_455_p2 <= "1" when (unsigned(loc_V_reg_993) > unsigned(ap_const_lv8_96)) else "0";
    tmp_7_fu_378_p2 <= (tmp_5_fu_372_p2 and tmp_6_reg_970);
    tmp_7_i_i_fu_618_p2 <= "1" when (unsigned(loc_V_2_fu_602_p4) > unsigned(ap_const_lv8_96)) else "0";
        tmp_9_cast_fu_336_p1 <= std_logic_vector(resize(signed(tmp_9_fu_331_p2),32));

    tmp_9_fu_331_p2 <= std_logic_vector(unsigned(Offset_read_reg_901) + unsigned(i_cast_fu_315_p1));
    tmp_9_i_fu_425_p1 <= std_logic_vector(resize(unsigned(index_V_1_fu_415_p4),32));
    tmp_9_i_i_fu_634_p1 <= std_logic_vector(resize(unsigned(index_V_fu_624_p4),32));
    tmp_fu_553_p2 <= (tmp_6_i_fu_455_p2 and sel_tmp_i_fu_547_p2);
    tmp_i_fu_450_p2 <= "1" when (unsigned(loc_V_reg_993) < unsigned(ap_const_lv8_7F)) else "0";
    tmp_i_i4_fu_430_p2 <= "0" when (loc_V_1_reg_1001 = ap_const_lv23_0) else "1";
    tmp_i_i_41_fu_786_p1 <= std_logic_vector(resize(unsigned(p_Result_28_fu_779_p3),78));
    tmp_i_i_fu_460_p2 <= "1" when (loc_V_reg_993 = ap_const_lv8_FF) else "0";
    tmp_i_i_i_cast8_fu_745_p1 <= std_logic_vector(resize(unsigned(loc_V_4_reg_1075),9));
    x_assign_1_fu_719_p3 <= 
        reg_302 when (sel_tmp2_fu_714_p2(0) = '1') else 
        sel_tmp_fu_705_p1;
    xf_exp_V_fu_515_p3 <= 
        ap_const_lv8_0 when (tmp_2_i_fu_484_p2(0) = '1') else 
        addconv_i_fu_510_p2;
    xf_sig_V_fu_435_p2 <= (mask_table4_q0 and loc_V_1_reg_1001);
    xs_sig_V_fu_674_p2 <= (loc_V_3_fu_664_p1 and tmp_2_i_i_fu_668_p2);
    
    zeros_fu_472_p3_proc : process(p_Result_23_fu_465_p3)
    begin
        zeros_fu_472_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_23_fu_465_p3(i) = '1' then
                zeros_fu_472_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

end behav;
